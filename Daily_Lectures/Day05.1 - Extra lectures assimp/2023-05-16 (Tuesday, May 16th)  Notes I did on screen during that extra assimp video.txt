I've got the sound off because I'm listening to some tunes, that might mess up The YouTubes. 

Anywho, I'm going to build assimp, which is the asset loader library that you can use if you'd like. 

I'll wrap it around a simple class that might give you a sense of how assimp stores the info.

Note that depending on what model you load, assimp can give you a bunch of unexpected things. 

(Unlike a simple PLY file, which only has one mesh)

I downloaded assimp here, at the root (C:)

Now I'm going to run CMake to generate the Visual Studio projects. 

"Shared" in this configuration means that the .lib file is smaller (usually) but you'll need to distribute the .dll files, too. 

I'm going to make a "Static" one as well. This one DOESN'T require that you distribute the DLL, but the .lib file will likely be a lot larger. 

If you read up on assimp, you'll find that it uses zip to compress some of the files (and decompress, too). 
Sooooo when you build the libraries, you'll also need to build the zlibstatic thing as well. 

We'll build the 64 bit Debug and Release versions. 
(and ignore the other builds that CMake generated)

...takes a little while...

Good gravy... 
OK, Level 3 is fine. Good Lord. 

This bit of code looks like an error handler.
Error handling is important and all, but in our case, if we can't load the file, then we are completely screwed anyway.

OK, while it's building, lets see where it put all the files...

It looks like the .lib files are in the "lib" directory and the .dll files are in the "bin"
That's pretty typical I guess.

We didn't do the "ALL_BUILD" since it's huge, and we don't need all of that, anyway. 
That will make a bunch of other interesting stuff, but we won't need it. 

Let's see what it built. 

Notice that the "static" one (the one that doesn't need the .dll files) doesn't have the "bin" folder.

What are all these? 

the .dll is a dll file (Dynamic Link Library), which the .lib uses. The .exp file is a list of what functions and methods (and classes) are inside that DLL (in case you wanted to know). But you don't have to do anything to get this to work - all you have to do is have the DLL in the same directory as the EXE file you make. 

THere's some command line tool that you can use to see the library contents... I'm trying to remember what it is though... LoL

Here it is. Again, you don't actually need this...

That's all the functions (or whatever) that's in this particular DLL. 
The .EXP file can be used to manually bind to the dll. 

But, you don't have to do that if you are using the corresponding .lib file. 

So why have two types? (static and dll)?

Well here's why:

The DLL (shared):
- Debug: 	dll = 19 Mbytes
         	lib = .4 Mbytes
- Release: 	dll = 5.3 Mbytes
            lib = .4 Mbytes

Static: 
- Debug:    lib = 319 Mbytes (!!!!)
- Release:  lib =  60 Mbytes (!!!)

So static is way, WAY bigger. 

But, with the shared, you also have to distribute a DLL, which makes the deployment slightly more annoying. 

Becuse git thinks anything larger than 50 Mbytes is 
TOO big (a "large" file), let's see how large it is when we compress it...

Ok not too bad. 
Hopefully the "git ignore" file will tell git to ignore these uncompressed files when we commit. 
 
To make things a little more easy to handle, I'm going to create a separate library project. This way if you don't want to use assimp, you don't have to. 

Also, it'll show how you make a lib and also had to do a "pointer to implementation" pattern. 

We're choosing a "static" library here.
i.e. we are using this project - that will wrap around the assimp stuff - as a static library. 

The default code gives you an example function that is exported to the other project. 

Here's how you use it when you have the project inside Visual Studio...

This "dependancies" tell Visual Studio to build the library first, THEN try to build the other one. 

OK, this is this "pre-compiled header" stuff. 
This is great when it works, like if the project is massive or you're making small changes, or the thing is heavily templated, but we'll simplify this by getting rid off all this stuff.

This has no negative impact (unless it's a massive project or something, or you're boss tell you to use them...)

the "framework.h" is the default header that the project wizard gives you. 

These functions aren't "visible" externally until you "export" them. You don't want all the functions visible. Like often there's code that's only internal to the library for internal (private) purposes. 

DUMPBIN was the thing I was looking for. 

OK, I'm not remembering why the DUMPBIN isn't showing the function, but hey...

This is also neat - if you have the library project here as well, then you can debug/step into the library source code. 

OK, while I'm in here, I'm going to clean up all that commented out stuff, too. 

Now let's finally add the assimp code to the library project we've added. 
We're doing this so that we aren't tied to the assimp library. This will make more sense when we have a simple class that we can use in the main project. 

Just like the other project, we can have separate library and header files - like just for this other proejct. 

Here's the link for that: https://learn.microsoft.com/en-us/cpp/build/exporting-from-a-dll-using-declspec-dllexport?view=msvc-170

OK, a student showed up...